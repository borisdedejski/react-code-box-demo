{"ast":null,"code":"'use strict';\n\nconst defaultTreeAdapter = require('../tree-adapters/default');\n\nconst mergeOptions = require('../utils/merge-options');\n\nconst doctype = require('../common/doctype');\n\nconst HTML = require('../common/html'); //Aliases\n\n\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES; //Default serializer options\n\nconst DEFAULT_OPTIONS = {\n  treeAdapter: defaultTreeAdapter\n}; //Escaping regexes\n\nconst AMP_REGEX = /&/g;\nconst NBSP_REGEX = /\\u00a0/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g; //Serializer\n\nclass Serializer {\n  constructor(node, options) {\n    this.options = mergeOptions(DEFAULT_OPTIONS, options);\n    this.treeAdapter = this.options.treeAdapter;\n    this.html = '';\n    this.startNode = node;\n  } //API\n\n\n  serialize() {\n    this._serializeChildNodes(this.startNode);\n\n    return this.html;\n  } //Internals\n\n\n  _serializeChildNodes(parentNode) {\n    const childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n    if (childNodes) {\n      for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n        const currentNode = childNodes[i];\n\n        if (this.treeAdapter.isElementNode(currentNode)) {\n          this._serializeElement(currentNode);\n        } else if (this.treeAdapter.isTextNode(currentNode)) {\n          this._serializeTextNode(currentNode);\n        } else if (this.treeAdapter.isCommentNode(currentNode)) {\n          this._serializeCommentNode(currentNode);\n        } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n          this._serializeDocumentTypeNode(currentNode);\n        }\n      }\n    }\n  }\n\n  _serializeElement(node) {\n    const tn = this.treeAdapter.getTagName(node);\n    const ns = this.treeAdapter.getNamespaceURI(node);\n    this.html += '<' + tn;\n\n    this._serializeAttributes(node);\n\n    this.html += '>';\n\n    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {\n      const childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n      this._serializeChildNodes(childNodesHolder);\n\n      this.html += '</' + tn + '>';\n    }\n  }\n\n  _serializeAttributes(node) {\n    const attrs = this.treeAdapter.getAttrList(node);\n\n    for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n      const attr = attrs[i];\n      const value = Serializer.escapeString(attr.value, true);\n      this.html += ' ';\n\n      if (!attr.namespace) {\n        this.html += attr.name;\n      } else if (attr.namespace === NS.XML) {\n        this.html += 'xml:' + attr.name;\n      } else if (attr.namespace === NS.XMLNS) {\n        if (attr.name !== 'xmlns') {\n          this.html += 'xmlns:';\n        }\n\n        this.html += attr.name;\n      } else if (attr.namespace === NS.XLINK) {\n        this.html += 'xlink:' + attr.name;\n      } else {\n        this.html += attr.prefix + ':' + attr.name;\n      }\n\n      this.html += '=\"' + value + '\"';\n    }\n  }\n\n  _serializeTextNode(node) {\n    const content = this.treeAdapter.getTextNodeContent(node);\n    const parent = this.treeAdapter.getParentNode(node);\n    let parentTn = void 0;\n\n    if (parent && this.treeAdapter.isElementNode(parent)) {\n      parentTn = this.treeAdapter.getTagName(parent);\n    }\n\n    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {\n      this.html += content;\n    } else {\n      this.html += Serializer.escapeString(content, false);\n    }\n  }\n\n  _serializeCommentNode(node) {\n    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n  }\n\n  _serializeDocumentTypeNode(node) {\n    const name = this.treeAdapter.getDocumentTypeNodeName(node);\n    this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n  }\n\n} // NOTE: used in tests and by rewriting stream\n\n\nSerializer.escapeString = function (str, attrMode) {\n  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n  if (attrMode) {\n    str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n  } else {\n    str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n  }\n\n  return str;\n};\n\nmodule.exports = Serializer;","map":{"version":3,"sources":["/home/boris/Desktop/react-code-box-demo/react-code-box-demo/node_modules/parse5/lib/serializer/index.js"],"names":["defaultTreeAdapter","require","mergeOptions","doctype","HTML","$","TAG_NAMES","NS","NAMESPACES","DEFAULT_OPTIONS","treeAdapter","AMP_REGEX","NBSP_REGEX","DOUBLE_QUOTE_REGEX","LT_REGEX","GT_REGEX","Serializer","constructor","node","options","html","startNode","serialize","_serializeChildNodes","parentNode","childNodes","getChildNodes","i","cnLength","length","currentNode","isElementNode","_serializeElement","isTextNode","_serializeTextNode","isCommentNode","_serializeCommentNode","isDocumentTypeNode","_serializeDocumentTypeNode","tn","getTagName","ns","getNamespaceURI","_serializeAttributes","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","childNodesHolder","TEMPLATE","getTemplateContent","attrs","getAttrList","attrsLength","attr","value","escapeString","namespace","name","XML","XMLNS","XLINK","prefix","content","getTextNodeContent","parent","getParentNode","parentTn","STYLE","SCRIPT","XMP","IFRAME","NOEMBED","NOFRAMES","PLAINTEXT","NOSCRIPT","getCommentNodeContent","getDocumentTypeNodeName","serializeContent","str","attrMode","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst defaultTreeAdapter = require('../tree-adapters/default');\nconst mergeOptions = require('../utils/merge-options');\nconst doctype = require('../common/doctype');\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Default serializer options\nconst DEFAULT_OPTIONS = {\n    treeAdapter: defaultTreeAdapter\n};\n\n//Escaping regexes\nconst AMP_REGEX = /&/g;\nconst NBSP_REGEX = /\\u00a0/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g;\n\n//Serializer\nclass Serializer {\n    constructor(node, options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n        this.treeAdapter = this.options.treeAdapter;\n\n        this.html = '';\n        this.startNode = node;\n    }\n\n    //API\n    serialize() {\n        this._serializeChildNodes(this.startNode);\n\n        return this.html;\n    }\n\n    //Internals\n    _serializeChildNodes(parentNode) {\n        const childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n        if (childNodes) {\n            for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n                const currentNode = childNodes[i];\n\n                if (this.treeAdapter.isElementNode(currentNode)) {\n                    this._serializeElement(currentNode);\n                } else if (this.treeAdapter.isTextNode(currentNode)) {\n                    this._serializeTextNode(currentNode);\n                } else if (this.treeAdapter.isCommentNode(currentNode)) {\n                    this._serializeCommentNode(currentNode);\n                } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n                    this._serializeDocumentTypeNode(currentNode);\n                }\n            }\n        }\n    }\n\n    _serializeElement(node) {\n        const tn = this.treeAdapter.getTagName(node);\n        const ns = this.treeAdapter.getNamespaceURI(node);\n\n        this.html += '<' + tn;\n        this._serializeAttributes(node);\n        this.html += '>';\n\n        if (\n            tn !== $.AREA &&\n            tn !== $.BASE &&\n            tn !== $.BASEFONT &&\n            tn !== $.BGSOUND &&\n            tn !== $.BR &&\n            tn !== $.COL &&\n            tn !== $.EMBED &&\n            tn !== $.FRAME &&\n            tn !== $.HR &&\n            tn !== $.IMG &&\n            tn !== $.INPUT &&\n            tn !== $.KEYGEN &&\n            tn !== $.LINK &&\n            tn !== $.META &&\n            tn !== $.PARAM &&\n            tn !== $.SOURCE &&\n            tn !== $.TRACK &&\n            tn !== $.WBR\n        ) {\n            const childNodesHolder =\n                tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n            this._serializeChildNodes(childNodesHolder);\n            this.html += '</' + tn + '>';\n        }\n    }\n\n    _serializeAttributes(node) {\n        const attrs = this.treeAdapter.getAttrList(node);\n\n        for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n            const attr = attrs[i];\n            const value = Serializer.escapeString(attr.value, true);\n\n            this.html += ' ';\n\n            if (!attr.namespace) {\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XML) {\n                this.html += 'xml:' + attr.name;\n            } else if (attr.namespace === NS.XMLNS) {\n                if (attr.name !== 'xmlns') {\n                    this.html += 'xmlns:';\n                }\n\n                this.html += attr.name;\n            } else if (attr.namespace === NS.XLINK) {\n                this.html += 'xlink:' + attr.name;\n            } else {\n                this.html += attr.prefix + ':' + attr.name;\n            }\n\n            this.html += '=\"' + value + '\"';\n        }\n    }\n\n    _serializeTextNode(node) {\n        const content = this.treeAdapter.getTextNodeContent(node);\n        const parent = this.treeAdapter.getParentNode(node);\n        let parentTn = void 0;\n\n        if (parent && this.treeAdapter.isElementNode(parent)) {\n            parentTn = this.treeAdapter.getTagName(parent);\n        }\n\n        if (\n            parentTn === $.STYLE ||\n            parentTn === $.SCRIPT ||\n            parentTn === $.XMP ||\n            parentTn === $.IFRAME ||\n            parentTn === $.NOEMBED ||\n            parentTn === $.NOFRAMES ||\n            parentTn === $.PLAINTEXT ||\n            parentTn === $.NOSCRIPT\n        ) {\n            this.html += content;\n        } else {\n            this.html += Serializer.escapeString(content, false);\n        }\n    }\n\n    _serializeCommentNode(node) {\n        this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n    }\n\n    _serializeDocumentTypeNode(node) {\n        const name = this.treeAdapter.getDocumentTypeNodeName(node);\n\n        this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n    }\n}\n\n// NOTE: used in tests and by rewriting stream\nSerializer.escapeString = function(str, attrMode) {\n    str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n    if (attrMode) {\n        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n    } else {\n        str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n    }\n\n    return str;\n};\n\nmodule.exports = Serializer;\n"]},"metadata":{},"sourceType":"script"}