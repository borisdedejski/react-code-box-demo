{"ast":null,"code":"'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nconst Tokenizer = require('../../tokenizer');\n\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\n\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\n\nconst HTML = require('../../common/html'); //Aliases\n\n\nconst $ = HTML.TAG_NAMES;\n\nclass LocationInfoParserMixin extends Mixin {\n  constructor(parser) {\n    super(parser);\n    this.parser = parser;\n    this.treeAdapter = this.parser.treeAdapter;\n    this.posTracker = null;\n    this.lastStartTagToken = null;\n    this.lastFosterParentingLocation = null;\n    this.currentToken = null;\n  }\n\n  _setStartLocation(element) {\n    let loc = null;\n\n    if (this.lastStartTagToken) {\n      loc = Object.assign({}, this.lastStartTagToken.location);\n      loc.startTag = this.lastStartTagToken.location;\n    }\n\n    this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n  }\n\n  _setEndLocation(element, closingToken) {\n    const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n    if (loc) {\n      if (closingToken.location) {\n        const ctLoc = closingToken.location;\n        const tn = this.treeAdapter.getTagName(element); // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n\n        const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n\n        if (isClosingEndTag) {\n          loc.endTag = Object.assign({}, ctLoc);\n          loc.endLine = ctLoc.endLine;\n          loc.endCol = ctLoc.endCol;\n          loc.endOffset = ctLoc.endOffset;\n        } else {\n          loc.endLine = ctLoc.startLine;\n          loc.endCol = ctLoc.startCol;\n          loc.endOffset = ctLoc.startOffset;\n        }\n      }\n    }\n  }\n\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      _bootstrap(document, fragmentContext) {\n        orig._bootstrap.call(this, document, fragmentContext);\n\n        mxn.lastStartTagToken = null;\n        mxn.lastFosterParentingLocation = null;\n        mxn.currentToken = null;\n        const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n        mxn.posTracker = tokenizerMixin.posTracker;\n        Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n          onItemPop: function (element) {\n            mxn._setEndLocation(element, mxn.currentToken);\n          }\n        });\n      },\n\n      _runParsingLoop(scriptHandler) {\n        orig._runParsingLoop.call(this, scriptHandler); // NOTE: generate location info for elements\n        // that remains on open element stack\n\n\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n          mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n        }\n      },\n\n      //Token processing\n      _processTokenInForeignContent(token) {\n        mxn.currentToken = token;\n\n        orig._processTokenInForeignContent.call(this, token);\n      },\n\n      _processToken(token) {\n        mxn.currentToken = token;\n\n        orig._processToken.call(this, token); //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n        //their end location explicitly.\n\n\n        const requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));\n\n        if (requireExplicitUpdate) {\n          for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const element = this.openElements.items[i];\n\n            if (this.treeAdapter.getTagName(element) === token.tagName) {\n              mxn._setEndLocation(element, token);\n\n              break;\n            }\n          }\n        }\n      },\n\n      //Doctype\n      _setDocumentType(token) {\n        orig._setDocumentType.call(this, token);\n\n        const documentChildren = this.treeAdapter.getChildNodes(this.document);\n        const cnLength = documentChildren.length;\n\n        for (let i = 0; i < cnLength; i++) {\n          const node = documentChildren[i];\n\n          if (this.treeAdapter.isDocumentTypeNode(node)) {\n            this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n            break;\n          }\n        }\n      },\n\n      //Elements\n      _attachElementToTree(element) {\n        //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n        //So we will use token location stored in this methods for the element.\n        mxn._setStartLocation(element);\n\n        mxn.lastStartTagToken = null;\n\n        orig._attachElementToTree.call(this, element);\n      },\n\n      _appendElement(token, namespaceURI) {\n        mxn.lastStartTagToken = token;\n\n        orig._appendElement.call(this, token, namespaceURI);\n      },\n\n      _insertElement(token, namespaceURI) {\n        mxn.lastStartTagToken = token;\n\n        orig._insertElement.call(this, token, namespaceURI);\n      },\n\n      _insertTemplate(token) {\n        mxn.lastStartTagToken = token;\n\n        orig._insertTemplate.call(this, token);\n\n        const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n        this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n      },\n\n      _insertFakeRootElement() {\n        orig._insertFakeRootElement.call(this);\n\n        this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n      },\n\n      //Comments\n      _appendCommentNode(token, parent) {\n        orig._appendCommentNode.call(this, token, parent);\n\n        const children = this.treeAdapter.getChildNodes(parent);\n        const commentNode = children[children.length - 1];\n        this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n      },\n\n      //Text\n      _findFosterParentingLocation() {\n        //NOTE: store last foster parenting location, so we will be able to find inserted text\n        //in case of foster parenting\n        mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n        return mxn.lastFosterParentingLocation;\n      },\n\n      _insertCharacters(token) {\n        orig._insertCharacters.call(this, token);\n\n        const hasFosterParent = this._shouldFosterParentOnInsertion();\n\n        const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;\n        const textNode = siblings[textNodeIdx]; //NOTE: if we have location assigned by another token, then just update end position\n\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n        if (tnLoc) {\n          tnLoc.endLine = token.location.endLine;\n          tnLoc.endCol = token.location.endCol;\n          tnLoc.endOffset = token.location.endOffset;\n        } else {\n          this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n      }\n\n    };\n  }\n\n}\n\nmodule.exports = LocationInfoParserMixin;","map":{"version":3,"sources":["/home/boris/Desktop/react-code-box-demo/react-code-box-demo/node_modules/parse5/lib/extensions/location-info/parser-mixin.js"],"names":["Mixin","require","Tokenizer","LocationInfoTokenizerMixin","LocationInfoOpenElementStackMixin","HTML","$","TAG_NAMES","LocationInfoParserMixin","constructor","parser","treeAdapter","posTracker","lastStartTagToken","lastFosterParentingLocation","currentToken","_setStartLocation","element","loc","Object","assign","location","startTag","setNodeSourceCodeLocation","_setEndLocation","closingToken","getNodeSourceCodeLocation","ctLoc","tn","getTagName","isClosingEndTag","type","END_TAG_TOKEN","tagName","endTag","endLine","endCol","endOffset","startLine","startCol","startOffset","_getOverriddenMethods","mxn","orig","_bootstrap","document","fragmentContext","call","tokenizerMixin","install","tokenizer","openElements","onItemPop","_runParsingLoop","scriptHandler","i","stackTop","items","_processTokenInForeignContent","token","_processToken","requireExplicitUpdate","BODY","hasInScope","_setDocumentType","documentChildren","getChildNodes","cnLength","length","node","isDocumentTypeNode","_attachElementToTree","_appendElement","namespaceURI","_insertElement","_insertTemplate","tmplContent","getTemplateContent","current","_insertFakeRootElement","_appendCommentNode","parent","children","commentNode","_findFosterParentingLocation","_insertCharacters","hasFosterParent","_shouldFosterParentOnInsertion","currentTmplContent","siblings","textNodeIdx","beforeElement","indexOf","textNode","tnLoc","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\nconst HTML = require('../../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\n\nclass LocationInfoParserMixin extends Mixin {\n    constructor(parser) {\n        super(parser);\n\n        this.parser = parser;\n        this.treeAdapter = this.parser.treeAdapter;\n        this.posTracker = null;\n        this.lastStartTagToken = null;\n        this.lastFosterParentingLocation = null;\n        this.currentToken = null;\n    }\n\n    _setStartLocation(element) {\n        let loc = null;\n\n        if (this.lastStartTagToken) {\n            loc = Object.assign({}, this.lastStartTagToken.location);\n            loc.startTag = this.lastStartTagToken.location;\n        }\n\n        this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n\n    _setEndLocation(element, closingToken) {\n        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n        if (loc) {\n            if (closingToken.location) {\n                const ctLoc = closingToken.location;\n                const tn = this.treeAdapter.getTagName(element);\n\n                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n\n                if (isClosingEndTag) {\n                    loc.endTag = Object.assign({}, ctLoc);\n                    loc.endLine = ctLoc.endLine;\n                    loc.endCol = ctLoc.endCol;\n                    loc.endOffset = ctLoc.endOffset;\n                } else {\n                    loc.endLine = ctLoc.startLine;\n                    loc.endCol = ctLoc.startCol;\n                    loc.endOffset = ctLoc.startOffset;\n                }\n            }\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                mxn.lastStartTagToken = null;\n                mxn.lastFosterParentingLocation = null;\n                mxn.currentToken = null;\n\n                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n\n                mxn.posTracker = tokenizerMixin.posTracker;\n\n                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n                    onItemPop: function(element) {\n                        mxn._setEndLocation(element, mxn.currentToken);\n                    }\n                });\n            },\n\n            _runParsingLoop(scriptHandler) {\n                orig._runParsingLoop.call(this, scriptHandler);\n\n                // NOTE: generate location info for elements\n                // that remains on open element stack\n                for (let i = this.openElements.stackTop; i >= 0; i--) {\n                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n                }\n            },\n\n            //Token processing\n            _processTokenInForeignContent(token) {\n                mxn.currentToken = token;\n                orig._processTokenInForeignContent.call(this, token);\n            },\n\n            _processToken(token) {\n                mxn.currentToken = token;\n                orig._processToken.call(this, token);\n\n                //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n                //their end location explicitly.\n                const requireExplicitUpdate =\n                    token.type === Tokenizer.END_TAG_TOKEN &&\n                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));\n\n                if (requireExplicitUpdate) {\n                    for (let i = this.openElements.stackTop; i >= 0; i--) {\n                        const element = this.openElements.items[i];\n\n                        if (this.treeAdapter.getTagName(element) === token.tagName) {\n                            mxn._setEndLocation(element, token);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            //Doctype\n            _setDocumentType(token) {\n                orig._setDocumentType.call(this, token);\n\n                const documentChildren = this.treeAdapter.getChildNodes(this.document);\n                const cnLength = documentChildren.length;\n\n                for (let i = 0; i < cnLength; i++) {\n                    const node = documentChildren[i];\n\n                    if (this.treeAdapter.isDocumentTypeNode(node)) {\n                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n                        break;\n                    }\n                }\n            },\n\n            //Elements\n            _attachElementToTree(element) {\n                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n                //So we will use token location stored in this methods for the element.\n                mxn._setStartLocation(element);\n                mxn.lastStartTagToken = null;\n                orig._attachElementToTree.call(this, element);\n            },\n\n            _appendElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._appendElement.call(this, token, namespaceURI);\n            },\n\n            _insertElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._insertElement.call(this, token, namespaceURI);\n            },\n\n            _insertTemplate(token) {\n                mxn.lastStartTagToken = token;\n                orig._insertTemplate.call(this, token);\n\n                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n\n                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n            },\n\n            _insertFakeRootElement() {\n                orig._insertFakeRootElement.call(this);\n                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n            },\n\n            //Comments\n            _appendCommentNode(token, parent) {\n                orig._appendCommentNode.call(this, token, parent);\n\n                const children = this.treeAdapter.getChildNodes(parent);\n                const commentNode = children[children.length - 1];\n\n                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n            },\n\n            //Text\n            _findFosterParentingLocation() {\n                //NOTE: store last foster parenting location, so we will be able to find inserted text\n                //in case of foster parenting\n                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n\n                return mxn.lastFosterParentingLocation;\n            },\n\n            _insertCharacters(token) {\n                orig._insertCharacters.call(this, token);\n\n                const hasFosterParent = this._shouldFosterParentOnInsertion();\n\n                const parent =\n                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||\n                    this.openElements.currentTmplContent ||\n                    this.openElements.current;\n\n                const siblings = this.treeAdapter.getChildNodes(parent);\n\n                const textNodeIdx =\n                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement\n                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1\n                        : siblings.length - 1;\n\n                const textNode = siblings[textNodeIdx];\n\n                //NOTE: if we have location assigned by another token, then just update end position\n                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n                if (tnLoc) {\n                    tnLoc.endLine = token.location.endLine;\n                    tnLoc.endCol = token.location.endCol;\n                    tnLoc.endOffset = token.location.endOffset;\n                } else {\n                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n                }\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoParserMixin;\n"]},"metadata":{},"sourceType":"script"}