{"ast":null,"code":"'use strict';\n\nconst Parser = require('./parser');\n\nconst Serializer = require('./serializer'); // Shorthands\n\n\nexports.parse = function parse(html, options) {\n  const parser = new Parser(options);\n  return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  const parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n  const serializer = new Serializer(node, options);\n  return serializer.serialize();\n};","map":{"version":3,"sources":["/home/boris/Desktop/react-code-box-demo/react-code-box-demo/node_modules/parse5/lib/index.js"],"names":["Parser","require","Serializer","exports","parse","html","options","parser","parseFragment","fragmentContext","serialize","node","serializer"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B,C,CAEA;;;AACAE,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC1C,QAAMC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAf;AAEA,SAAOC,MAAM,CAACH,KAAP,CAAaC,IAAb,CAAP;AACH,CAJD;;AAMAF,OAAO,CAACK,aAAR,GAAwB,SAASA,aAAT,CAAuBC,eAAvB,EAAwCJ,IAAxC,EAA8CC,OAA9C,EAAuD;AAC3E,MAAI,OAAOG,eAAP,KAA2B,QAA/B,EAAyC;AACrCH,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGI,eAAP;AACAA,IAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,QAAMF,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAf;AAEA,SAAOC,MAAM,CAACC,aAAP,CAAqBH,IAArB,EAA2BI,eAA3B,CAAP;AACH,CAVD;;AAYAN,OAAO,CAACO,SAAR,GAAoB,UAASC,IAAT,EAAeL,OAAf,EAAwB;AACxC,QAAMM,UAAU,GAAG,IAAIV,UAAJ,CAAeS,IAAf,EAAqBL,OAArB,CAAnB;AAEA,SAAOM,UAAU,CAACF,SAAX,EAAP;AACH,CAJD","sourcesContent":["'use strict';\n\nconst Parser = require('./parser');\nconst Serializer = require('./serializer');\n\n// Shorthands\nexports.parse = function parse(html, options) {\n    const parser = new Parser(options);\n\n    return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n\n    const parser = new Parser(options);\n\n    return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function(node, options) {\n    const serializer = new Serializer(node, options);\n\n    return serializer.serialize();\n};\n"]},"metadata":{},"sourceType":"script"}