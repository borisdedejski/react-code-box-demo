{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chalk_1 = __importStar(require(\"chalk\")); // Always enable at least basic color support, even if not auto-detected\n\n\nvar chalk = new chalk_1.default.Instance({\n  level: Math.min(chalk_1.default.level, 1\n  /* Basic */\n  )\n});\n/**\n * Identity function for tokens that should not be styled (returns the input string as-is).\n * See [[Theme]] for an example.\n */\n\nexports.plain = function (codePart) {\n  return codePart;\n};\n/**\n * The default theme. It is possible to override just individual keys.\n */\n\n\nexports.DEFAULT_THEME = {\n  /**\n   * keyword in a regular Algol-style language\n   */\n  keyword: chalk.blue,\n\n  /**\n   * built-in or library object (constant, class, function)\n   */\n  built_in: chalk.cyan,\n\n  /**\n   * user-defined type in a language with first-class syntactically significant types, like\n   * Haskell\n   */\n  type: chalk.cyan.dim,\n\n  /**\n   * special identifier for a built-in value (\"true\", \"false\", \"null\")\n   */\n  literal: chalk.blue,\n\n  /**\n   * number, including units and modifiers, if any.\n   */\n  number: chalk.green,\n\n  /**\n   * literal regular expression\n   */\n  regexp: chalk.red,\n\n  /**\n   * literal string, character\n   */\n  string: chalk.red,\n\n  /**\n   * parsed section inside a literal string\n   */\n  subst: exports.plain,\n\n  /**\n   * symbolic constant, interned string, goto label\n   */\n  symbol: exports.plain,\n\n  /**\n   * class or class-level declaration (interfaces, traits, modules, etc)\n   */\n  class: chalk.blue,\n\n  /**\n   * function or method declaration\n   */\n  function: chalk.yellow,\n\n  /**\n   * name of a class or a function at the place of declaration\n   */\n  title: exports.plain,\n\n  /**\n   * block of function arguments (parameters) at the place of declaration\n   */\n  params: exports.plain,\n\n  /**\n   * comment\n   */\n  comment: chalk.green,\n\n  /**\n   * documentation markup within comments\n   */\n  doctag: chalk.green,\n\n  /**\n   * flags, modifiers, annotations, processing instructions, preprocessor directive, etc\n   */\n  meta: chalk.grey,\n\n  /**\n   * keyword or built-in within meta construct\n   */\n  'meta-keyword': exports.plain,\n\n  /**\n   * string within meta construct\n   */\n  'meta-string': exports.plain,\n\n  /**\n   * heading of a section in a config file, heading in text markup\n   */\n  section: exports.plain,\n\n  /**\n   * XML/HTML tag\n   */\n  tag: chalk.grey,\n\n  /**\n   * name of an XML tag, the first word in an s-expression\n   */\n  name: chalk.blue,\n\n  /**\n   * s-expression name from the language standard library\n   */\n  'builtin-name': exports.plain,\n\n  /**\n   * name of an attribute with no language defined semantics (keys in JSON, setting names in\n   * .ini), also sub-attribute within another highlighted object, like XML tag\n   */\n  attr: chalk.cyan,\n\n  /**\n   * name of an attribute followed by a structured value part, like CSS properties\n   */\n  attribute: exports.plain,\n\n  /**\n   * variable in a config or a template file, environment var expansion in a script\n   */\n  variable: exports.plain,\n\n  /**\n   * list item bullet in text markup\n   */\n  bullet: exports.plain,\n\n  /**\n   * code block in text markup\n   */\n  code: exports.plain,\n\n  /**\n   * emphasis in text markup\n   */\n  emphasis: chalk.italic,\n\n  /**\n   * strong emphasis in text markup\n   */\n  strong: chalk.bold,\n\n  /**\n   * mathematical formula in text markup\n   */\n  formula: exports.plain,\n\n  /**\n   * hyperlink in text markup\n   */\n  link: chalk.underline,\n\n  /**\n   * quotation in text markup\n   */\n  quote: exports.plain,\n\n  /**\n   * tag selector in CSS\n   */\n  'selector-tag': exports.plain,\n\n  /**\n   * #id selector in CSS\n   */\n  'selector-id': exports.plain,\n\n  /**\n   * .class selector in CSS\n   */\n  'selector-class': exports.plain,\n\n  /**\n   * [attr] selector in CSS\n   */\n  'selector-attr': exports.plain,\n\n  /**\n   * :pseudo selector in CSS\n   */\n  'selector-pseudo': exports.plain,\n\n  /**\n   * tag of a template language\n   */\n  'template-tag': exports.plain,\n\n  /**\n   * variable in a template language\n   */\n  'template-variable': exports.plain,\n\n  /**\n   * added or changed line in a diff\n   */\n  addition: chalk.green,\n\n  /**\n   * deleted line in a diff\n   */\n  deletion: chalk.red,\n\n  /**\n   * things not matched by any token\n   */\n  default: exports.plain\n};\n/**\n * Converts a [[JsonTheme]] with string values to a [[Theme]] with formatter functions. Used by [[parse]].\n */\n\nfunction fromJson(json) {\n  var theme = {};\n\n  for (var _i = 0, _a = Object.keys(json); _i < _a.length; _i++) {\n    var key = _a[_i];\n    var style = json[key];\n\n    if (Array.isArray(style)) {\n      ;\n      theme[key] = style.reduce(function (prev, curr) {\n        return curr === 'plain' ? exports.plain : prev[curr];\n      }, chalk);\n    } else {\n      ;\n      theme[key] = chalk[style];\n    }\n  }\n\n  return theme;\n}\n\nexports.fromJson = fromJson;\n/**\n * Converts a [[Theme]] with formatter functions to a [[JsonTheme]] with string values. Used by [[stringify]].\n */\n\nfunction toJson(theme) {\n  var jsonTheme = {};\n\n  for (var _i = 0, _a = Object.keys(jsonTheme); _i < _a.length; _i++) {\n    var key = _a[_i];\n    var style = jsonTheme[key];\n    jsonTheme[key] = style._styles;\n  }\n\n  return jsonTheme;\n}\n\nexports.toJson = toJson;\n/**\n * Stringifies a [[Theme]] with formatter functions to a JSON string.\n *\n * ```ts\n * import chalk = require('chalk');\n * import {stringify} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * const myTheme: Theme = {\n *     keyword: chalk.red.bold,\n *     addition: chalk.green,\n *     deletion: chalk.red.strikethrough,\n *     number: plain\n * }\n * const json = stringify(myTheme);\n * fs.writeFile('mytheme.json', json, (err: any) => {\n *     if (err) throw err;\n *     console.log('Theme saved');\n * });\n * ```\n */\n\nfunction stringify(theme) {\n  return JSON.stringify(toJson(theme));\n}\n\nexports.stringify = stringify;\n/**\n * Parses a JSON string into a [[Theme]] with formatter functions.\n *\n * ```ts\n * import * as fs from 'fs';\n * import {parse, highlight} from 'cli-highlight';\n *\n * fs.readFile('mytheme.json', 'utf8', (err: any, json: string)  => {\n *     if (err) throw err;\n *     const code = highlight('SELECT * FROM table', {theme: parse(json)});\n *     console.log(code);\n * });\n * ```\n */\n\nfunction parse(json) {\n  return fromJson(JSON.parse(json));\n}\n\nexports.parse = parse;","map":{"version":3,"sources":["../src/theme.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk_1 = __importStar(require(\"chalk\"));\n// Always enable at least basic color support, even if not auto-detected\nvar chalk = new chalk_1.default.Instance({ level: Math.min(chalk_1.default.level, 1 /* Basic */) });\n/**\n * Identity function for tokens that should not be styled (returns the input string as-is).\n * See [[Theme]] for an example.\n */\nexports.plain = function (codePart) { return codePart; };\n/**\n * The default theme. It is possible to override just individual keys.\n */\nexports.DEFAULT_THEME = {\n    /**\n     * keyword in a regular Algol-style language\n     */\n    keyword: chalk.blue,\n    /**\n     * built-in or library object (constant, class, function)\n     */\n    built_in: chalk.cyan,\n    /**\n     * user-defined type in a language with first-class syntactically significant types, like\n     * Haskell\n     */\n    type: chalk.cyan.dim,\n    /**\n     * special identifier for a built-in value (\"true\", \"false\", \"null\")\n     */\n    literal: chalk.blue,\n    /**\n     * number, including units and modifiers, if any.\n     */\n    number: chalk.green,\n    /**\n     * literal regular expression\n     */\n    regexp: chalk.red,\n    /**\n     * literal string, character\n     */\n    string: chalk.red,\n    /**\n     * parsed section inside a literal string\n     */\n    subst: exports.plain,\n    /**\n     * symbolic constant, interned string, goto label\n     */\n    symbol: exports.plain,\n    /**\n     * class or class-level declaration (interfaces, traits, modules, etc)\n     */\n    class: chalk.blue,\n    /**\n     * function or method declaration\n     */\n    function: chalk.yellow,\n    /**\n     * name of a class or a function at the place of declaration\n     */\n    title: exports.plain,\n    /**\n     * block of function arguments (parameters) at the place of declaration\n     */\n    params: exports.plain,\n    /**\n     * comment\n     */\n    comment: chalk.green,\n    /**\n     * documentation markup within comments\n     */\n    doctag: chalk.green,\n    /**\n     * flags, modifiers, annotations, processing instructions, preprocessor directive, etc\n     */\n    meta: chalk.grey,\n    /**\n     * keyword or built-in within meta construct\n     */\n    'meta-keyword': exports.plain,\n    /**\n     * string within meta construct\n     */\n    'meta-string': exports.plain,\n    /**\n     * heading of a section in a config file, heading in text markup\n     */\n    section: exports.plain,\n    /**\n     * XML/HTML tag\n     */\n    tag: chalk.grey,\n    /**\n     * name of an XML tag, the first word in an s-expression\n     */\n    name: chalk.blue,\n    /**\n     * s-expression name from the language standard library\n     */\n    'builtin-name': exports.plain,\n    /**\n     * name of an attribute with no language defined semantics (keys in JSON, setting names in\n     * .ini), also sub-attribute within another highlighted object, like XML tag\n     */\n    attr: chalk.cyan,\n    /**\n     * name of an attribute followed by a structured value part, like CSS properties\n     */\n    attribute: exports.plain,\n    /**\n     * variable in a config or a template file, environment var expansion in a script\n     */\n    variable: exports.plain,\n    /**\n     * list item bullet in text markup\n     */\n    bullet: exports.plain,\n    /**\n     * code block in text markup\n     */\n    code: exports.plain,\n    /**\n     * emphasis in text markup\n     */\n    emphasis: chalk.italic,\n    /**\n     * strong emphasis in text markup\n     */\n    strong: chalk.bold,\n    /**\n     * mathematical formula in text markup\n     */\n    formula: exports.plain,\n    /**\n     * hyperlink in text markup\n     */\n    link: chalk.underline,\n    /**\n     * quotation in text markup\n     */\n    quote: exports.plain,\n    /**\n     * tag selector in CSS\n     */\n    'selector-tag': exports.plain,\n    /**\n     * #id selector in CSS\n     */\n    'selector-id': exports.plain,\n    /**\n     * .class selector in CSS\n     */\n    'selector-class': exports.plain,\n    /**\n     * [attr] selector in CSS\n     */\n    'selector-attr': exports.plain,\n    /**\n     * :pseudo selector in CSS\n     */\n    'selector-pseudo': exports.plain,\n    /**\n     * tag of a template language\n     */\n    'template-tag': exports.plain,\n    /**\n     * variable in a template language\n     */\n    'template-variable': exports.plain,\n    /**\n     * added or changed line in a diff\n     */\n    addition: chalk.green,\n    /**\n     * deleted line in a diff\n     */\n    deletion: chalk.red,\n    /**\n     * things not matched by any token\n     */\n    default: exports.plain,\n};\n/**\n * Converts a [[JsonTheme]] with string values to a [[Theme]] with formatter functions. Used by [[parse]].\n */\nfunction fromJson(json) {\n    var theme = {};\n    for (var _i = 0, _a = Object.keys(json); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = json[key];\n        if (Array.isArray(style)) {\n            ;\n            theme[key] = style.reduce(function (prev, curr) { return (curr === 'plain' ? exports.plain : prev[curr]); }, chalk);\n        }\n        else {\n            ;\n            theme[key] = chalk[style];\n        }\n    }\n    return theme;\n}\nexports.fromJson = fromJson;\n/**\n * Converts a [[Theme]] with formatter functions to a [[JsonTheme]] with string values. Used by [[stringify]].\n */\nfunction toJson(theme) {\n    var jsonTheme = {};\n    for (var _i = 0, _a = Object.keys(jsonTheme); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var style = jsonTheme[key];\n        jsonTheme[key] = style._styles;\n    }\n    return jsonTheme;\n}\nexports.toJson = toJson;\n/**\n * Stringifies a [[Theme]] with formatter functions to a JSON string.\n *\n * ```ts\n * import chalk = require('chalk');\n * import {stringify} from 'cli-highlight';\n * import * as fs from 'fs';\n *\n * const myTheme: Theme = {\n *     keyword: chalk.red.bold,\n *     addition: chalk.green,\n *     deletion: chalk.red.strikethrough,\n *     number: plain\n * }\n * const json = stringify(myTheme);\n * fs.writeFile('mytheme.json', json, (err: any) => {\n *     if (err) throw err;\n *     console.log('Theme saved');\n * });\n * ```\n */\nfunction stringify(theme) {\n    return JSON.stringify(toJson(theme));\n}\nexports.stringify = stringify;\n/**\n * Parses a JSON string into a [[Theme]] with formatter functions.\n *\n * ```ts\n * import * as fs from 'fs';\n * import {parse, highlight} from 'cli-highlight';\n *\n * fs.readFile('mytheme.json', 'utf8', (err: any, json: string)  => {\n *     if (err) throw err;\n *     const code = highlight('SELECT * FROM table', {theme: parse(json)});\n *     console.log(code);\n * });\n * ```\n */\nfunction parse(json) {\n    return fromJson(JSON.parse(json));\n}\nexports.parse = parse;\n//# sourceMappingURL=theme.js.map"]},"metadata":{},"sourceType":"script"}